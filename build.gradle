plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	 id "org.sonarqube" version "3.0"
}

group = 'ch.noseryoung'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'

	compile "org.postgresql:postgresql:42.2.6"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '2.2.2.RELEASE'
	implementation group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'

	implementation "org.mapstruct:mapstruct:1.3.0.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"
}

tasks.withType(JavaExec) {
	doFirst {
		file(".env").readLines().each {
			if (it != "" && it.charAt(0) != (char) '#') {
				def (key, value) = it.tokenize("=")

				if (System.getenv((String) key) == null) {
					environment((String) key, value)
				}
			}
		}
	}
}

test {
	useJUnitPlatform()
}

sonarqube {
  properties {
    property "sonar.projectKey", "Nosifier_nosifier"
  }
}
